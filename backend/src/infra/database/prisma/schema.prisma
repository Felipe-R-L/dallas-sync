// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------------------------
// 0. Tenancy Module
// -------------------------------------------

model Tenant {
  id     String  @id @default(cuid())
  name   String
  active Boolean @default(true)

  // Tenant Relations
  users          User[]
  roles          Role[]
  groups         UserGroup[]
  roomTypes      RoomType[]
  rooms          Room[]
  products       Product[]
  paymentMethods PaymentMethod[]
  prices         Price[]
  reservations   Reservation[]
  shifts         Shift[]
  stays          Stay[]
  expenses       Expense[]
  assetTypes     AssetType[]
  assets         Asset[]
}

// -------------------------------------------
// 1. Access Control & Users Module
// -------------------------------------------

model User {
  id        String   @id @default(cuid())
  fullName  String
  login     String   @unique
  password  String /// Stored as a hash
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenantId String? /// If null, this is a Platform Super Admin
  tenant   Tenant? @relation(fields: [tenantId], references: [id])

  // Granular Permission Relations
  groups      UserGroup[]
  roles       Role[]
  permissions Permission[]

  // Operational Relations
  shiftsOpened       Shift[]         @relation("OpenedBy")
  shiftsClosed       Shift[]         @relation("ClosedBy")
  expensesCreated    Expense[]
  stockMovements     StockMovement[]
  refundsProcessed   Refund[]        @relation("ProcessedByUser")
  damageFeesReported DamageFee[]     @relation("ReportedByUser")
  assetHistory       AssetHistory[]  @relation("ChangedByUser")
}

model UserGroup {
  id          String  @id @default(cuid())
  name        String
  description String?

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  users       User[]
  roles       Role[]
  permissions Permission[]

  @@unique([tenantId, name])
}

model Role {
  id          String  @id @default(cuid())
  name        String
  description String?

  tenantId String? /// If null, it's a platform-level role (e.g., "Platform Admin")
  tenant   Tenant? @relation(fields: [tenantId], references: [id])

  permissions Permission[]
  users       User[]
  groups      UserGroup[]

  @@unique([tenantId, name])
}

model Permission {
  id       String @id @default(cuid())
  action   String /// e.g., "CREATE", "READ", "UPDATE", "DELETE"
  resource String /// e.g., "Stay", "User", "AssetReport"

  roles  Role[]
  users  User[]
  groups UserGroup[]

  @@unique([action, resource])
}

// -------------------------------------------
// 2. Core Entities & Setup Module
// -------------------------------------------

model RoomType {
  id          String  @id @default(cuid())
  name        String
  description String?
  capacity    Int

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  rooms           Room[]
  pricingProfiles Price[]
}

model Room {
  id     String     @id @default(cuid())
  number String
  status RoomStatus @default(AVAILABLE)
  floor  String?

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  roomTypeId String
  roomType   RoomType @relation(fields: [roomTypeId], references: [id])

  stays            Stay[]
  reservations     Reservation[]
  assets           Asset[]
  assetHistoryFrom AssetHistory[] @relation("FromRoom")
  assetHistoryTo   AssetHistory[] @relation("ToRoom")

  @@unique([tenantId, number])
}

model Product {
  id            String  @id @default(cuid())
  name          String
  description   String?
  salePrice     Int /// Stored in cents
  unitOfMeasure String

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  stockMovements   StockMovement[]
  stayConsumptions StayConsumption[]

  @@unique([tenantId, name])
}

model PaymentMethod {
  id       String  @id @default(cuid())
  name     String
  isActive Boolean @default(true)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  paymentsMade    StayPayment[]
  cashFlowEntries FinancialTransaction[]

  @@unique([tenantId, name])
}

// -------------------------------------------
// 3. Pricing & Reservations Module
// -------------------------------------------

model Price {
  id                  String    @id @default(cuid())
  description         String
  periodPrice         Int /// Stored in cents
  periodHours         Int
  overnightPrice      Int /// Stored in cents
  extraHourPrice      Int /// Stored in cents
  applicableDayOfWeek Int?
  validFrom           DateTime?
  validUntil          DateTime?
  isActive            Boolean   @default(true)

  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  roomTypeId String
  roomType   RoomType @relation(fields: [roomTypeId], references: [id])
}

model Reservation {
  id               String            @id @default(cuid())
  customerName     String
  customerPhone    String?
  checkInDateTime  DateTime
  checkOutDateTime DateTime
  depositAmount    Int               @default(0) /// Stored in cents
  status           ReservationStatus @default(CONFIRMED)
  createdAt        DateTime          @default(now())

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  roomId   String
  room     Room   @relation(fields: [roomId], references: [id])
}

// -------------------------------------------
// 4. Operational & Transactional Module
// -------------------------------------------

model Shift {
  id          String      @id @default(cuid())
  startAt     DateTime    @default(now())
  endAt       DateTime?
  openingCash Int /// Stored in cents
  closingCash Int? /// Stored in cents
  status      ShiftStatus @default(OPEN)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  openedById String
  openedBy   User    @relation("OpenedBy", fields: [openedById], references: [id])
  closedById String?
  closedBy   User?   @relation("ClosedBy", fields: [closedById], references: [id])

  /// MODIFIED: Added relation names to resolve ambiguity
  staysOpened Stay[] @relation("OpenedInShift")
  staysClosed Stay[] @relation("ClosedInShift")

  cashFlowEntries FinancialTransaction[]
}

model Stay {
  id               String     @id @default(cuid())
  checkInAt        DateTime   @default(now())
  checkOutAt       DateTime?
  vehiclePlate     String?
  stayType         StayType
  roomPrice        Int /// Stored in cents
  consumptionTotal Int        @default(0) /// Stored in cents
  damageFeesTotal  Int        @default(0) /// Stored in cents
  discounts        Int        @default(0) /// Stored in cents
  totalAmount      Int        @default(0) /// Stored in cents
  amountPaid       Int        @default(0) /// Stored in cents
  status           StayStatus @default(ACTIVE)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  roomId   String
  room     Room   @relation(fields: [roomId], references: [id])

  /// MODIFIED: Added relation names to resolve ambiguity
  openedInShiftId String
  openedInShift   Shift   @relation("OpenedInShift", fields: [openedInShiftId], references: [id])
  closedInShiftId String?
  closedInShift   Shift?  @relation("ClosedInShift", fields: [closedInShiftId], references: [id])

  consumptions StayConsumption[]
  payments     StayPayment[]
  refunds      Refund[]
  damageFees   DamageFee[]
}

model StayConsumption {
  id           String   @id @default(cuid())
  quantity     Int
  unitPrice    Int /// Stored in cents
  discount     Int      @default(0) /// Stored in cents
  registeredAt DateTime @default(now())

  stayId    String
  stay      Stay    @relation(fields: [stayId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  stockMovement StockMovement?
}

model StockMovement {
  id       String            @id @default(cuid())
  type     StockMovementType
  quantity Int
  reason   String?
  movedAt  DateTime          @default(now())

  productId String
  product   Product @relation(fields: [productId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  stayConsumptionId String?          @unique
  stayConsumption   StayConsumption? @relation(fields: [stayConsumptionId], references: [id])
}

// -------------------------------------------
// 5. Financial Module
// -------------------------------------------

model FinancialTransaction {
  id              String          @id @default(cuid())
  description     String
  type            TransactionType
  amount          Int /// Stored in cents
  transactionDate DateTime        @default(now())

  shiftId String
  shift   Shift  @relation(fields: [shiftId], references: [id])

  paymentMethodId String?
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])

  stayPaymentId String?      @unique
  stayPayment   StayPayment? @relation(fields: [stayPaymentId], references: [id])
  expenseId     String?      @unique
  expense       Expense?     @relation(fields: [expenseId], references: [id])
  refundId      String?      @unique
  refund        Refund?      @relation(fields: [refundId], references: [id])
}

model StayPayment {
  id          String        @id @default(cuid())
  amount      Int /// Stored in cents
  paymentDate DateTime      @default(now())
  status      PaymentStatus @default(COMPLETED)

  stayId          String
  stay            Stay          @relation(fields: [stayId], references: [id])
  paymentMethodId String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])

  financialTransaction FinancialTransaction?
  refunds              Refund[]
}

model Expense {
  id          String        @id @default(cuid())
  description String
  amount      Int /// Stored in cents
  dueDate     DateTime
  paymentDate DateTime?
  status      ExpenseStatus @default(PENDING)

  tenantId       String
  tenant         Tenant @relation(fields: [tenantId], references: [id])
  registeredById String
  registeredBy   User   @relation(fields: [registeredById], references: [id])

  financialTransaction FinancialTransaction?
}

model Refund {
  id        String   @id @default(cuid())
  amount    Int /// Stored in cents
  reason    String
  createdAt DateTime @default(now())

  processedById     String
  processedBy       User         @relation("ProcessedByUser", fields: [processedById], references: [id])
  stayId            String
  stay              Stay         @relation(fields: [stayId], references: [id])
  originalPaymentId String?
  originalPayment   StayPayment? @relation(fields: [originalPaymentId], references: [id])

  financialTransaction FinancialTransaction?
}

// -------------------------------------------
// 6. Asset Management Module
// -------------------------------------------

model AssetType {
  id              String  @id @default(cuid())
  name            String
  description     String?
  manufacturer    String?
  model           String?
  replacementCost Int /// Stored in cents

  tenantId String
  tenant   Tenant  @relation(fields: [tenantId], references: [id])
  assets   Asset[]

  @@unique([tenantId, name])
}

model Asset {
  id           String      @id @default(cuid())
  assetTag     String
  serialNumber String?
  status       AssetStatus @default(IN_USE)
  purchaseDate DateTime?

  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  assetTypeId String
  assetType   AssetType @relation(fields: [assetTypeId], references: [id])
  roomId      String?
  room        Room?     @relation(fields: [roomId], references: [id])

  history    AssetHistory[]
  damageFees DamageFee[]

  @@unique([tenantId, assetTag])
}

model AssetHistory {
  id         String                @id @default(cuid())
  type       AssetHistoryEventType
  notes      String?
  timestamp  DateTime              @default(now())
  fromStatus AssetStatus?
  toStatus   AssetStatus?
  fromRoomId String?
  fromRoom   Room?                 @relation("FromRoom", fields: [fromRoomId], references: [id])
  toRoomId   String?
  toRoom     Room?                 @relation("ToRoom", fields: [toRoomId], references: [id])

  assetId     String
  asset       Asset  @relation(fields: [assetId], references: [id])
  changedById String
  changedBy   User   @relation("ChangedByUser", fields: [changedById], references: [id])
}

model DamageFee {
  id        String   @id @default(cuid())
  amount    Int /// Stored in cents
  notes     String
  createdAt DateTime @default(now())

  stayId       String
  stay         Stay   @relation(fields: [stayId], references: [id])
  assetId      String
  asset        Asset  @relation(fields: [assetId], references: [id])
  reportedById String
  reportedBy   User   @relation("ReportedByUser", fields: [reportedById], references: [id])
}

// -------------------------------------------
// Enums
// -------------------------------------------

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  CLEANING
  MAINTENANCE
}

enum ReservationStatus {
  CONFIRMED
  CANCELLED
  CHECKED_IN
  NO_SHOW
}

enum ShiftStatus {
  OPEN
  CLOSED
}

enum StayType {
  PERIOD
  OVERNIGHT
}

enum StayStatus {
  ACTIVE
  FINISHED
  CANCELLED
}

enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
  LOSS
}

enum TransactionType {
  REVENUE
  EXPENSE
  REFUND
}

enum ExpenseStatus {
  PENDING
  PAID
}

enum PaymentStatus {
  COMPLETED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum AssetStatus {
  IN_USE
  IN_STORAGE
  IN_REPAIR
  DAMAGED
  RETIRED
}

enum AssetHistoryEventType {
  CREATION
  LOCATION_CHANGE
  STATUS_CHANGE
  NOTE
}
